/* BUILD
protoc --proto_path=src/proto --proto_path=C:\Users\samda\go\src --go_out=plugins=grpc:src/proto .\src\proto\services\players\registrar\registrar.proto
*/

syntax = "proto3";

import "github.com/sambdavidson/community-chess/src/proto/messages/player.proto";

package registrar;

service PlayersRegistrar {
    rpc RegisterPlayer (RegisterPlayerRequest) returns (RegisterPlayerResponse);
    rpc GetPlayer (GetPlayerRequest) returns (GetPlayerReponse);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

    // Internal Services Only
    rpc TokenPublicKeys(TokenPublicKeysRequest) returns (TokenPublicKeysResponse);
}

message RegisterPlayerRequest {
    string username = 1;    
    // TODO: oauth stuff
    // email, link to social media and stuff
}

message RegisterPlayerResponse {
    messages.Player player = 1;
}

message GetPlayerRequest {
    string player_id = 1;
}

message GetPlayerReponse {
    messages.Player player = 1;
}

message LoginRequest {
    // TODO: password, OAUTH, other login strats. 
    string username = 1;
}

message LoginResponse {
    // Short lived JWT.
    string token = 1;
}

message RefreshTokenRequest {
    string token = 1;
}

message RefreshTokenResponse {
    string token = 1;
}

message TokenPublicKeysRequest {}

message TokenPublicKeysResponse {
    // Public keys are used up until the next timestamp. Sorted in newest to oldest.
    repeated TimeToPublicKey history = 1;

    message TimeToPublicKey {
        // Seconds since epoch.
        int64 not_before = 1;
        int64 not_after = 2;
        // PEM encoded RSA 2048 Public Key
        bytes pem_public_key = 3; 
    }
}