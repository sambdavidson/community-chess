/* BUILD
protoc --proto_path=src/proto --proto_path=C:\Users\samda\go\src --go_out=plugins=grpc:src/proto .\src\proto\messages\game.proto
*/

syntax = "proto3";

import "github.com/sambdavidson/community-chess/src/proto/messages/games/chess.proto";

package messages;

message Game {
    // Type of game this is, see Type message for currently supported list of types.
    Type type = 1;

    // When adding a new type add an enum here and add its appropriate messages
    // to all the oneof fields below.
    enum Type {
        CHESS = 0;
    }

    // UUIDv4 uniquely identifying the game. Used as a key for many requests
    string id = 2;
    
    // Start time of this game in UnixNanos since Epoch 
    int64 start_time = 3;
    
    // This will probably need to be changed when on a networked cloud. 
    // For now it will just be localhost:{port}. This should eventually point
    // to a load balancer which will direct traffic to one of many slaves,
    // or just a master server if traffic is low.
    string location = 4;
    
    // Metadata of this game.
    Metadata metadata = 5;

    // State of this game.
    State state = 6;

    // History of this game.
    History history = 7;

    // Metadata contains various potentially changing details common to all games.
    // The contents herein will mostly be set on game creation and remain static.
    message Metadata {

        // Title of the game that will be shown publicly.
        string title = 1;

        // Description of the game, useful if players want to create custom
        // games with enticing descriptiong or silly rules.
        string description = 2;

        // Visibility of the game.
        Visibility visibility = 3;

        enum Visibility {
            OPEN = 0;
            INVITE_ONLY = 1;
        }

        // Non-game-specific rules for this game.
        Rules rules = 4;

        message Rules {

            // How votes will be counted. See the comments below.
            oneof vote_application {
                VoteAppliedImmediately vote_applied_immediately = 1;
                VoteAppliedAfterTally vote_applied_after_tally = 2;
            }

            // A vote is essentially an action that will be applied immediately.
            // Think the default Twitch Plays Pokemon mode.
            message VoteAppliedImmediately {}

            // A vote that will be tallied after some timeout and the actual 
            // game-state changing move will selected based on that tally.
            message VoteAppliedAfterTally {
                // Must be > 3 seconds
                int32 timeout_seconds = 1;
                SelectionType selection_type = 2;
                // If every added player votes, should we still wait?
                bool wait_full_timeout = 3;

                enum SelectionType {
                    MOST_VOTES = 0;
                    PROBABILITY = 1;
                }

            }

            oneof game_specific {
                games.ChessRules chess_rules = 3;
            }
            
        }
        
    }

    // State of the current game. Specific to whatever game is being played.
    message State {
        oneof game {
            games.ChessState chess_state = 6;
        }
    }

    // History of the current game, usualy containing a list of previous states.
    message History {
        oneof game {
            games.ChessHistory chess_history = 7;
        }
    }

    // Fields that should be filled out for any player wishing to join a game.
    message NewPlayerFields {
        oneof game {
            games.ChessNewPlayerFields chess_fields = 3;
        }
    }
}